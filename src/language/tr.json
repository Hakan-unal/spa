{
    "title1": "Single Page Application Nedir (SPA) ?",
    "title2": "Neden Single Page Application ?",
    "title3": "Avantajları",
    "title4": "Dezavantajları",
    "paragraph1": "Single page application uygulaması, tüm sayfaları yeniden yükleyen bir uygulama yerine web sunucusundan dinamik değişen verilere göre uygulamayı yeniden şekillendiren bir yapıdır. Bunu yapabilmesi routing(yönlendirme) işlemini backend tarafında değil client-side tarafında yapabiliyor olmasındandır. Yeni nesil frameworklerle ve component yapılarıyla birlikte yeni bir sayfaya geçilmiş etkisi yaratılıyor. SPA öncesinde bu durum kullanıcının web uygulama içerisine girip statik sayfa için istek atmasıyla oluyordu ve sunucu sayfayı istemci tarafına dönüyordu ama burada sorun gelen her istekte sunucunun tüm sayfayı gönderiyor olmasıydı bu da daha yavaş internet deneyimi yaşatıyordu. İlerleyen zamanlarda ortaya çıkan AJAX bu durumu bir nebze olsun rahatlatmış olsada yinede routing işlemi sunucuya yükleniyor.",
    "paragraph2": "SPA ile sunucudaki yük daha da hafifletildi ve istemci tarafına daha çok yük bindi. Gelişen tarayıcılar, internet ve bilgisayar bu yükü daha az hissetmemize neden oldu. Routing işleminin tüm kullanıcılar için tek bir sunucuda gerçekleştirilmesi yerine her kullanıcının kendi tarayıcında gerçekleştirilebilir olması bize daha hızlı internet deneyimi sağladı. Birçok yeni framework'ün ortaya çıkmasının altındaki sebeplerden birisi aslında bu internette daha hızlı gezinme vaadi sunuyorlar. Frameworklerin çıkış hızına yetişebilenlerdenseniz son yıllarda popülerliğini arttıran ve birçok JavaScript frameworkünün benimsediği avantajları olduğu kadar dezavantajları da olan bu konuya birlikte kısaca bakalım.",
    "paragraph3": "SPA uygulamalarında bütün sayfa yenilenmez, bu bize hız farkını gösterir. Uygulama kaynak dosyaları ilk yükleme anında sunucudan gelir ve değiştiğini gördüğümüz veri olur, bu yüzden de uygulama ilk yükleme sonrasında sayfa geçişlerinde çok hızlı olur.",
    "paragraph4": "İlk yükleme anından sonra internetiniz yavaş olsa bile veya internet bağlantınız kopsa dahi uygulama içerisinde kalmaya devam edebilirsiniz. Önbellek yönetimi konusunda ve kullanıcı deneyimi açısından önemli ve etkili bir özellik.",
    "paragraph5": "Yazılım geliştiricileri açısından bu parçalı component yapısı modüler geliştirmeye olanak sağlamakta. Uygulamanın belirli bir bölümünde hata olsa bile bütün uygulamayı etkilemeyen bir süreçle karşılaşırsınız veya bununla birlikte geliştirme yaparken süreçleri birbirinden ayırıp geliştirme sürecini daha rahat yönetebilirsiniz.",
    "paragraph6": "Yeni frameworklerle birlikte ortaya çıkan toollarla bug çözümleri daha rahat hale geldi. Bu toolları kullanarak yazılım geliştirme sürecindeki hızınızı arttırabilirsiniz. Modern birçok frameworkün(React, VueJS, AngularJS) tarayıcılarda toolları mevcut.",
    "paragraph7": "SEO konusunda eksik kalıyor, bunun nedeni arama motorunun uygulamayı tek sayfa olarak görmesi ve dinamik değişikliği algılamaması. Gelişen süreçte bu soruna çözümler getirmeye çalışan ve geliştirmeyi amaçlayan frameworkler mevcut NextJS bunlardan biri. Bunun dışında google tarafında da sorunu atlatabilmek açısından geliştirmeler yapılmakta.",
    "paragraph8": "Eğer geliştirme sürecinde dikkatli değilseniz ve gözden kaçan noktalar oluşmuşsa bu birçok kullanılmayan gereksiz datanın sayfalar arasında gezinmesine neden olur. State yönetimi ve modül geçişlerinde bunları doğru şekilde temizlemek önemli bir konu.",
    "paragraph9": "Routing süreçlerinde bir önceki web sayfasına gitmeniz veya hata almanız kaçınılmaz. Bu yüzden SPA uygulamaları için global paket yöneticileri(npm, yarn) içerisinde tarayıcı geçmişini yönetebileceğiniz paketler bulunmakta."
}